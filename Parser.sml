local
type t__1__ = (int*int)
type t__2__ = (int*int)
type t__3__ = (int*int)
type t__4__ = (int*int)
type t__5__ = (int*int)
type t__6__ = (int*int)
type t__7__ = (int*int)
type t__8__ = (int*int)
type t__9__ = (int*int)
type t__10__ = (int*int)
type t__11__ = (int*int)
type t__12__ = (int*int)
type t__13__ = (int*int)
type t__14__ = string*(int*int)
type t__15__ = (int*int)
type t__16__ = (int*int)
type t__17__ = (int*int)
type t__18__ = (int*int)
type t__19__ = (int*int)
type t__20__ = (int*int)
type t__21__ = (int*int)
type t__22__ = (int*int)
type t__23__ = (int*int)
type t__24__ = (int*int)
type t__25__ = int*(int*int)
type t__26__ = (int*int)
type t__27__ = (int*int)
type t__28__ = (int*int)
type t__29__ = (int*int)
type t__30__ = (int*int)
type t__31__ = (int*int)
type t__32__ = (int*int)
type t__33__ = (int*int)
type t__34__ = (int*int)
type t__35__ = (int*int)
in
datatype token =
    AND of t__1__
  | ARROW of t__2__
  | BAR of t__3__
  | BOOL of t__4__
  | CASE of t__5__
  | COLON of t__6__
  | COMMA of t__7__
  | ELSE of t__8__
  | END of t__9__
  | EOF of t__10__
  | EQUAL of t__11__
  | FALSE of t__12__
  | FUN of t__13__
  | ID of t__14__
  | IF of t__15__
  | IN of t__16__
  | INT of t__17__
  | LESS of t__18__
  | LET of t__19__
  | LPAR of t__20__
  | MATCHARROW of t__21__
  | MINUS of t__22__
  | NOT of t__23__
  | NULL of t__24__
  | NUM of t__25__
  | OF of t__26__
  | OR of t__27__
  | PLUS of t__28__
  | READ of t__29__
  | RPAR of t__30__
  | SEMI of t__31__
  | THEN of t__32__
  | TRUE of t__33__
  | TYPE of t__34__
  | WRITE of t__35__
end;

open Obj Parsing;
prim_val vector_ : int -> 'a -> 'a Vector.vector = 2 "make_vect";
prim_val update_ : 'a Vector.vector -> int -> 'a -> unit = 3 "set_vect_item";

val yytransl = #[
  257 (* AND *),
  258 (* ARROW *),
  259 (* BAR *),
  260 (* BOOL *),
  261 (* CASE *),
  262 (* COLON *),
  263 (* COMMA *),
  264 (* ELSE *),
  265 (* END *),
  266 (* EOF *),
  267 (* EQUAL *),
  268 (* FALSE *),
  269 (* FUN *),
  270 (* ID *),
  271 (* IF *),
  272 (* IN *),
  273 (* INT *),
  274 (* LESS *),
  275 (* LET *),
  276 (* LPAR *),
  277 (* MATCHARROW *),
  278 (* MINUS *),
  279 (* NOT *),
  280 (* NULL *),
  281 (* NUM *),
  282 (* OF *),
  283 (* OR *),
  284 (* PLUS *),
  285 (* READ *),
  286 (* RPAR *),
  287 (* SEMI *),
  288 (* THEN *),
  289 (* TRUE *),
  290 (* TYPE *),
  291 (* WRITE *),
    0];

val yylhs = "\255\255\
\\001\000\010\000\010\000\004\000\004\000\004\000\011\000\011\000\
\\012\000\012\000\012\000\008\000\008\000\008\000\008\000\008\000\
\\008\000\008\000\009\000\009\000\007\000\007\000\002\000\003\000\
\\003\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\\005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\\006\000\000\000";

val yylen = "\002\000\
\\004\000\009\000\000\000\001\000\001\000\001\000\003\000\003\000\
\\007\000\007\000\000\000\001\000\001\000\001\000\001\000\001\000\
\\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\\003\000\001\000\001\000\001\000\003\000\001\000\005\000\005\000\
\\003\000\003\000\003\000\003\000\002\000\003\000\003\000\006\000\
\\004\000\004\000\005\000\002\000\001\000\002\000\003\000\003\000\
\\003\000\002\000";

val yydefred = "\000\000\
\\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\026\000\045\000\027\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\014\000\016\000\000\000\015\000\
\\012\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\\000\000\006\000\005\000\004\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\018\000\017\000\000\000\000\000\025\000\000\000\000\000\
\\000\000\049\000\000\000\000\000\000\000\008\000\010\000\009\000\
\\000\000\000\000\043\000\000\000\000\000\000\000\020\000\032\000\
\\031\000\000\000\000\000\000\000\000\000\000\000\002\000";

val yydgoto = "\002\000\
\\004\000\035\000\036\000\053\000\023\000\039\000\078\000\079\000\
\\059\000\008\000\054\000\005\000";

val yysindex = "\014\000\
\\248\254\000\000\014\255\000\000\017\255\022\255\027\255\060\000\
\\030\255\052\255\060\000\000\000\060\000\060\000\063\255\060\000\
\\060\000\060\255\000\000\000\000\000\000\060\000\081\000\110\255\
\\110\255\210\000\000\000\017\000\000\000\000\000\063\255\000\000\
\\000\000\000\000\249\254\055\255\067\255\197\000\049\255\117\255\
\\080\255\000\000\060\000\000\000\060\000\060\000\060\000\060\000\
\\060\000\000\000\000\000\000\000\253\254\065\255\101\255\063\255\
\\060\000\001\255\074\255\060\000\063\255\060\000\060\000\060\000\
\\099\255\104\255\000\000\091\255\246\254\246\254\000\000\232\000\
\\000\000\110\255\248\254\248\254\110\255\010\255\086\255\212\000\
\\063\255\000\000\000\000\232\000\084\255\000\000\232\000\232\000\
\\234\000\000\000\097\255\112\255\127\255\000\000\000\000\000\000\
\\063\255\063\255\000\000\060\000\060\000\129\255\000\000\000\000\
\\000\000\039\255\134\255\232\000\232\000\017\255\000\000";

val yyrindex = "\000\000\
\\038\000\000\000\000\000\000\000\082\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\054\255\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\090\255\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\255\
\\000\000\122\255\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\154\255\000\000\000\000\111\000\250\255\006\000\186\255\123\000\
\\218\255\000\000\038\000\038\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\149\000\125\255\000\000\160\000\250\254\
\\113\255\000\000\000\000\000\000\116\255\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\121\255\000\000\000\000\
\\000\000\000\000\133\255\051\255\186\000\082\000\000\000";

val yygindex = "\000\000\
\\000\000\086\000\095\000\238\255\245\255\094\000\227\255\242\255\
\\078\000\050\000\092\000\254\255";

val YYTABLESIZE = 518;
val yytable = "\026\000\
\\037\000\027\000\028\000\074\000\038\000\040\000\055\000\081\000\
\\060\000\023\000\042\000\047\000\098\000\037\000\001\000\037\000\
\\058\000\049\000\099\000\037\000\037\000\037\000\037\000\061\000\
\\023\000\003\000\075\000\006\000\037\000\007\000\082\000\068\000\
\\009\000\069\000\070\000\071\000\072\000\073\000\037\000\037\000\
\\010\000\098\000\037\000\037\000\037\000\080\000\037\000\110\000\
\\084\000\024\000\087\000\088\000\089\000\021\000\030\000\093\000\
\\030\000\025\000\097\000\021\000\030\000\030\000\030\000\030\000\
\\030\000\041\000\102\000\106\000\107\000\030\000\062\000\030\000\
\\095\000\096\000\029\000\030\000\030\000\063\000\066\000\030\000\
\\030\000\030\000\031\000\030\000\030\000\030\000\032\000\033\000\
\\108\000\109\000\044\000\043\000\044\000\067\000\076\000\034\000\
\\044\000\044\000\044\000\044\000\044\000\045\000\077\000\083\000\
\\091\000\044\000\100\000\044\000\046\000\092\000\104\000\044\000\
\\047\000\050\000\061\000\044\000\044\000\044\000\049\000\044\000\
\\044\000\044\000\046\000\051\000\046\000\105\000\052\000\045\000\
\\046\000\046\000\046\000\046\000\046\000\074\000\046\000\081\000\
\\098\000\046\000\047\000\046\000\024\000\022\000\048\000\046\000\
\\049\000\007\000\085\000\046\000\046\000\046\000\019\000\046\000\
\\046\000\046\000\047\000\086\000\047\000\090\000\103\000\111\000\
\\047\000\047\000\047\000\047\000\047\000\094\000\000\000\000\000\
\\000\000\047\000\000\000\047\000\000\000\000\000\000\000\047\000\
\\000\000\000\000\000\000\047\000\047\000\047\000\000\000\047\000\
\\047\000\047\000\034\000\000\000\034\000\000\000\000\000\000\000\
\\034\000\034\000\034\000\034\000\034\000\000\000\000\000\000\000\
\\000\000\034\000\000\000\034\000\000\000\000\000\000\000\034\000\
\\000\000\000\000\000\000\034\000\034\000\034\000\000\000\034\000\
\\034\000\034\000\033\000\000\000\033\000\000\000\000\000\000\000\
\\033\000\033\000\033\000\033\000\033\000\000\000\000\000\000\000\
\\000\000\033\000\000\000\033\000\000\000\000\000\000\000\033\000\
\\000\000\000\000\000\000\033\000\033\000\033\000\000\000\033\000\
\\033\000\033\000\035\000\000\000\035\000\000\000\000\000\000\000\
\\035\000\035\000\035\000\035\000\000\000\000\000\036\000\000\000\
\\036\000\035\000\000\000\000\000\036\000\036\000\036\000\036\000\
\\000\000\043\000\000\000\035\000\035\000\036\000\000\000\035\000\
\\035\000\035\000\000\000\045\000\000\000\000\000\000\000\036\000\
\\036\000\000\000\046\000\036\000\036\000\036\000\047\000\000\000\
\\000\000\000\000\011\000\048\000\049\000\000\000\000\000\000\000\
\\057\000\011\000\011\000\011\000\011\000\000\000\000\000\000\000\
\\011\000\011\000\000\000\000\000\011\000\011\000\011\000\000\000\
\\011\000\000\000\011\000\000\000\000\000\000\000\011\000\012\000\
\\011\000\013\000\014\000\000\000\000\000\000\000\015\000\016\000\
\\000\000\043\000\017\000\018\000\019\000\000\000\003\000\000\000\
\\020\000\000\000\044\000\045\000\021\000\003\000\022\000\003\000\
\\003\000\000\000\046\000\000\000\003\000\003\000\047\000\000\000\
\\003\000\003\000\003\000\048\000\049\000\000\000\003\000\000\000\
\\000\000\038\000\003\000\000\000\003\000\038\000\038\000\038\000\
\\038\000\000\000\000\000\000\000\000\000\039\000\038\000\000\000\
\\000\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
\\038\000\038\000\039\000\000\000\038\000\038\000\038\000\000\000\
\\000\000\000\000\000\000\000\000\039\000\000\000\000\000\042\000\
\\039\000\039\000\039\000\042\000\042\000\042\000\042\000\000\000\
\\000\000\000\000\041\000\000\000\042\000\000\000\041\000\041\000\
\\041\000\041\000\000\000\000\000\000\000\000\000\042\000\041\000\
\\000\000\000\000\042\000\042\000\042\000\000\000\000\000\000\000\
\\000\000\041\000\000\000\000\000\040\000\041\000\041\000\041\000\
\\040\000\040\000\040\000\040\000\000\000\043\000\000\000\000\000\
\\000\000\040\000\000\000\064\000\000\000\000\000\000\000\045\000\
\\000\000\000\000\043\000\040\000\043\000\000\000\046\000\040\000\
\\040\000\040\000\047\000\101\000\045\000\000\000\045\000\048\000\
\\049\000\000\000\065\000\046\000\000\000\046\000\000\000\047\000\
\\043\000\047\000\043\000\056\000\048\000\049\000\048\000\049\000\
\\064\000\000\000\045\000\000\000\045\000\000\000\000\000\000\000\
\\000\000\046\000\000\000\046\000\000\000\047\000\000\000\047\000\
\\000\000\000\000\048\000\049\000\048\000\049\000";

val yycheck = "\011\000\
\\015\000\013\000\014\000\007\001\016\000\017\000\025\000\007\001\
\\016\001\016\001\022\000\022\001\003\001\001\001\001\000\003\001\
\\031\000\028\001\009\001\007\001\008\001\009\001\010\001\031\001\
\\031\001\034\001\030\001\014\001\016\001\013\001\030\001\043\000\
\\011\001\045\000\046\000\047\000\048\000\049\000\026\001\027\001\
\\014\001\003\001\030\001\031\001\032\001\057\000\061\000\009\001\
\\060\000\020\001\062\000\063\000\064\000\003\001\001\001\074\000\
\\003\001\006\001\077\000\009\001\007\001\008\001\009\001\010\001\
\\011\001\006\001\081\000\097\000\098\000\016\001\016\001\018\001\
\\075\000\076\000\012\001\022\001\014\001\011\001\030\001\026\001\
\\027\001\028\001\020\001\030\001\031\001\032\001\024\001\025\001\
\\100\000\101\000\001\001\001\001\003\001\014\001\030\001\033\001\
\\007\001\008\001\009\001\010\001\011\001\011\001\002\001\030\001\
\\006\001\016\001\021\001\018\001\018\001\006\001\014\001\022\001\
\\022\001\004\001\031\001\026\001\027\001\028\001\028\001\030\001\
\\031\001\032\001\001\001\014\001\003\001\014\001\017\001\011\001\
\\007\001\008\001\009\001\010\001\011\001\007\001\018\001\007\001\
\\003\001\016\001\022\001\018\001\016\001\009\001\030\001\022\001\
\\028\001\030\001\061\000\026\001\027\001\028\001\030\001\030\001\
\\031\001\032\001\001\001\061\000\003\001\064\000\081\000\110\000\
\\007\001\008\001\009\001\010\001\011\001\074\000\255\255\255\255\
\\255\255\016\001\255\255\018\001\255\255\255\255\255\255\022\001\
\\255\255\255\255\255\255\026\001\027\001\028\001\255\255\030\001\
\\031\001\032\001\001\001\255\255\003\001\255\255\255\255\255\255\
\\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\\255\255\016\001\255\255\018\001\255\255\255\255\255\255\022\001\
\\255\255\255\255\255\255\026\001\027\001\028\001\255\255\030\001\
\\031\001\032\001\001\001\255\255\003\001\255\255\255\255\255\255\
\\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\\255\255\016\001\255\255\018\001\255\255\255\255\255\255\022\001\
\\255\255\255\255\255\255\026\001\027\001\028\001\255\255\030\001\
\\031\001\032\001\001\001\255\255\003\001\255\255\255\255\255\255\
\\007\001\008\001\009\001\010\001\255\255\255\255\001\001\255\255\
\\003\001\016\001\255\255\255\255\007\001\008\001\009\001\010\001\
\\255\255\001\001\255\255\026\001\027\001\016\001\255\255\030\001\
\\031\001\032\001\255\255\011\001\255\255\255\255\255\255\026\001\
\\027\001\255\255\018\001\030\001\031\001\032\001\022\001\255\255\
\\255\255\255\255\005\001\027\001\028\001\255\255\255\255\255\255\
\\032\001\012\001\013\001\014\001\015\001\255\255\255\255\255\255\
\\019\001\020\001\255\255\255\255\023\001\024\001\025\001\255\255\
\\005\001\255\255\029\001\255\255\255\255\255\255\033\001\012\001\
\\035\001\014\001\015\001\255\255\255\255\255\255\019\001\020\001\
\\255\255\001\001\023\001\024\001\025\001\255\255\005\001\255\255\
\\029\001\255\255\010\001\011\001\033\001\012\001\035\001\014\001\
\\015\001\255\255\018\001\255\255\019\001\020\001\022\001\255\255\
\\023\001\024\001\025\001\027\001\028\001\255\255\029\001\255\255\
\\255\255\003\001\033\001\255\255\035\001\007\001\008\001\009\001\
\\010\001\255\255\255\255\255\255\255\255\003\001\016\001\255\255\
\\255\255\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\\026\001\027\001\016\001\255\255\030\001\031\001\032\001\255\255\
\\255\255\255\255\255\255\255\255\026\001\255\255\255\255\003\001\
\\030\001\031\001\032\001\007\001\008\001\009\001\010\001\255\255\
\\255\255\255\255\003\001\255\255\016\001\255\255\007\001\008\001\
\\009\001\010\001\255\255\255\255\255\255\255\255\026\001\016\001\
\\255\255\255\255\030\001\031\001\032\001\255\255\255\255\255\255\
\\255\255\026\001\255\255\255\255\003\001\030\001\031\001\032\001\
\\007\001\008\001\009\001\010\001\255\255\001\001\255\255\255\255\
\\255\255\016\001\255\255\007\001\255\255\255\255\255\255\011\001\
\\255\255\255\255\001\001\026\001\001\001\255\255\018\001\030\001\
\\031\001\032\001\022\001\008\001\011\001\255\255\011\001\027\001\
\\028\001\255\255\030\001\018\001\255\255\018\001\255\255\022\001\
\\001\001\022\001\001\001\026\001\027\001\028\001\027\001\028\001\
\\007\001\255\255\011\001\255\255\011\001\255\255\255\255\255\255\
\\255\255\018\001\255\255\018\001\255\255\022\001\255\255\022\001\
\\255\255\255\255\027\001\028\001\027\001\028\001";

val yyact = vector_ 51 (fn () => ((raise Fail "parser") : obj));
(* Rule 1, file Parser.grm, line 46 *)
val _ = update_ yyact 1
(fn () => repr(let
val d__1__ = peekVal 3 : Cat.TyDec list
val d__2__ = peekVal 2 : Cat.FunDec list
val d__3__ = peekVal 1 : Cat.Exp
val d__4__ = peekVal 0 : (int*int)
in
( ((d__1__),(d__2__),(d__3__)) ) end : Cat.Prog))
;
(* Rule 2, file Parser.grm, line 50 *)
val _ = update_ yyact 2
(fn () => repr(let
val d__1__ = peekVal 8 : (int*int)
val d__2__ = peekVal 7 : string*(int*int)
val d__3__ = peekVal 6 : (int*int)
val d__4__ = peekVal 5 : Cat.Type
val d__5__ = peekVal 4 : (int*int)
val d__6__ = peekVal 3 : Cat.Type
val d__7__ = peekVal 2 : Cat.Match
val d__8__ = peekVal 1 : (int*int)
val d__9__ = peekVal 0 : Cat.FunDec list
in
( (#1 (d__2__), (d__4__), (d__6__), (d__7__), (d__1__)) :: (d__9__) ) end : Cat.FunDec list))
;
(* Rule 3, file Parser.grm, line 51 *)
val _ = update_ yyact 3
(fn () => repr(let
in
( [] ) end : Cat.FunDec list))
;
(* Rule 4, file Parser.grm, line 54 *)
val _ = update_ yyact 4
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.Int (d__1__) ) end : Cat.Type))
;
(* Rule 5, file Parser.grm, line 55 *)
val _ = update_ yyact 5
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Cat.TyVar (d__1__) ) end : Cat.Type))
;
(* Rule 6, file Parser.grm, line 56 *)
val _ = update_ yyact 6
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.Bool (d__1__) ) end : Cat.Type))
;
(* Rule 7, file Parser.grm, line 59 *)
val _ = update_ yyact 7
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Type
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Type
in
([(d__1__),(d__3__)]) end : Cat.Type list))
;
(* Rule 8, file Parser.grm, line 60 *)
val _ = update_ yyact 8
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Type
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Type list
in
( (d__1__) :: (d__3__) ) end : Cat.Type list))
;
(* Rule 9, file Parser.grm, line 63 *)
val _ = update_ yyact 9
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : string*(int*int)
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : (int*int)
val d__5__ = peekVal 2 : Cat.Type list
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Cat.TyDec list
in
( (#1 (d__2__), (d__5__), (d__1__)) :: (d__7__) ) end : Cat.TyDec list))
;
(* Rule 10, file Parser.grm, line 64 *)
val _ = update_ yyact 10
(fn () => repr(let
val d__1__ = peekVal 6 : (int*int)
val d__2__ = peekVal 5 : string*(int*int)
val d__3__ = peekVal 4 : (int*int)
val d__4__ = peekVal 3 : (int*int)
val d__5__ = peekVal 2 : Cat.Type
val d__6__ = peekVal 1 : (int*int)
val d__7__ = peekVal 0 : Cat.TyDec list
in
( (#1 (d__2__), [(d__5__)], (d__1__)) :: (d__7__) ) end : Cat.TyDec list))
;
(* Rule 11, file Parser.grm, line 65 *)
val _ = update_ yyact 11
(fn () => repr(let
in
( [] ) end : Cat.TyDec list))
;
(* Rule 12, file Parser.grm, line 69 *)
val _ = update_ yyact 12
(fn () => repr(let
val d__1__ = peekVal 0 : int*(int*int)
in
( Cat.NumP (d__1__) ) end : Cat.Pat))
;
(* Rule 13, file Parser.grm, line 70 *)
val _ = update_ yyact 13
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.TrueP (d__1__) ) end : Cat.Pat))
;
(* Rule 14, file Parser.grm, line 71 *)
val _ = update_ yyact 14
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.FalseP (d__1__) ) end : Cat.Pat))
;
(* Rule 15, file Parser.grm, line 72 *)
val _ = update_ yyact 15
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.NullP (d__1__) ) end : Cat.Pat))
;
(* Rule 16, file Parser.grm, line 73 *)
val _ = update_ yyact 16
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Cat.VarP (d__1__) ) end : Cat.Pat))
;
(* Rule 17, file Parser.grm, line 74 *)
val _ = update_ yyact 17
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Cat.Pat list
val d__3__ = peekVal 0 : (int*int)
in
( Cat.TupleP ((d__2__), (d__1__)) ) end : Cat.Pat))
;
(* Rule 18, file Parser.grm, line 75 *)
val _ = update_ yyact 18
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Cat.Pat
val d__3__ = peekVal 0 : (int*int)
in
( Cat.TupleP ([(d__2__)], (d__1__)) ) end : Cat.Pat))
;
(* Rule 19, file Parser.grm, line 79 *)
val _ = update_ yyact 19
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Pat
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Pat
in
([(d__1__),(d__3__)]) end : Cat.Pat list))
;
(* Rule 20, file Parser.grm, line 80 *)
val _ = update_ yyact 20
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Pat
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Pat list
in
( (d__1__) :: (d__3__) ) end : Cat.Pat list))
;
(* Rule 21, file Parser.grm, line 84 *)
val _ = update_ yyact 21
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Pat
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( [((d__1__),(d__3__))] ) end : Cat.Match))
;
(* Rule 22, file Parser.grm, line 85 *)
val _ = update_ yyact 22
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Match
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Match
in
( (d__1__) @ (d__3__) ) end : Cat.Match))
;
(* Rule 23, file Parser.grm, line 88 *)
val _ = update_ yyact 23
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Pat
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( [((d__1__), (d__3__), (d__2__))] ) end : Cat.Dec))
;
(* Rule 24, file Parser.grm, line 91 *)
val _ = update_ yyact 24
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Dec
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Dec
in
( (d__1__) @ (d__3__) ) end : Cat.Dec))
;
(* Rule 25, file Parser.grm, line 92 *)
val _ = update_ yyact 25
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Dec
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Dec
in
( (d__1__) @ (d__3__) ) end : Cat.Dec))
;
(* Rule 26, file Parser.grm, line 95 *)
val _ = update_ yyact 26
(fn () => repr(let
val d__1__ = peekVal 0 : int*(int*int)
in
( Cat.Num (d__1__) ) end : Cat.Exp))
;
(* Rule 27, file Parser.grm, line 96 *)
val _ = update_ yyact 27
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.True (d__1__) ) end : Cat.Exp))
;
(* Rule 28, file Parser.grm, line 97 *)
val _ = update_ yyact 28
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.False (d__1__) ) end : Cat.Exp))
;
(* Rule 29, file Parser.grm, line 98 *)
val _ = update_ yyact 29
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : string*(int*int)
in
( Cat.Null (#1 (d__3__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 30, file Parser.grm, line 99 *)
val _ = update_ yyact 30
(fn () => repr(let
val d__1__ = peekVal 0 : string*(int*int)
in
( Cat.Var (d__1__) ) end : Cat.Exp))
;
(* Rule 31, file Parser.grm, line 100 *)
val _ = update_ yyact 31
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : Cat.Exp list
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : (int*int)
val d__5__ = peekVal 0 : string*(int*int)
in
( Cat.MkTuple ((d__2__), #1 (d__5__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 32, file Parser.grm, line 101 *)
val _ = update_ yyact 32
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : Cat.Exp
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : (int*int)
val d__5__ = peekVal 0 : string*(int*int)
in
( Cat.MkTuple ([(d__2__)], #1 (d__5__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 33, file Parser.grm, line 102 *)
val _ = update_ yyact 33
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( Cat.Plus ((d__1__), (d__3__), (d__2__)) ) end : Cat.Exp))
;
(* Rule 34, file Parser.grm, line 103 *)
val _ = update_ yyact 34
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( Cat.Minus ((d__1__), (d__3__), (d__2__)) ) end : Cat.Exp))
;
(* Rule 35, file Parser.grm, line 104 *)
val _ = update_ yyact 35
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( Cat.Equal ((d__1__), (d__3__), (d__2__)) ) end : Cat.Exp))
;
(* Rule 36, file Parser.grm, line 105 *)
val _ = update_ yyact 36
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( Cat.Less ((d__1__), (d__3__), (d__2__)) ) end : Cat.Exp))
;
(* Rule 37, file Parser.grm, line 106 *)
val _ = update_ yyact 37
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Cat.Exp
in
( Cat.Not ((d__2__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 38, file Parser.grm, line 107 *)
val _ = update_ yyact 38
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( Cat.And ((d__1__), (d__3__), (d__2__)) ) end : Cat.Exp))
;
(* Rule 39, file Parser.grm, line 108 *)
val _ = update_ yyact 39
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( Cat.Or((d__1__), (d__3__), (d__2__)) ) end : Cat.Exp))
;
(* Rule 40, file Parser.grm, line 109 *)
val _ = update_ yyact 40
(fn () => repr(let
val d__1__ = peekVal 5 : (int*int)
val d__2__ = peekVal 4 : Cat.Exp
val d__3__ = peekVal 3 : (int*int)
val d__4__ = peekVal 2 : Cat.Exp
val d__5__ = peekVal 1 : (int*int)
val d__6__ = peekVal 0 : Cat.Exp
in
( Cat.If ((d__2__), (d__4__), (d__6__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 41, file Parser.grm, line 110 *)
val _ = update_ yyact 41
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : Cat.Dec
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : Cat.Exp
in
( Cat.Let ((d__2__), (d__4__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 42, file Parser.grm, line 111 *)
val _ = update_ yyact 42
(fn () => repr(let
val d__1__ = peekVal 3 : (int*int)
val d__2__ = peekVal 2 : Cat.Dec
val d__3__ = peekVal 1 : (int*int)
val d__4__ = peekVal 0 : Cat.Exp
in
( Cat.Let ((d__2__), (d__4__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 43, file Parser.grm, line 112 *)
val _ = update_ yyact 43
(fn () => repr(let
val d__1__ = peekVal 4 : (int*int)
val d__2__ = peekVal 3 : Cat.Exp
val d__3__ = peekVal 2 : (int*int)
val d__4__ = peekVal 1 : Cat.Match
val d__5__ = peekVal 0 : (int*int)
in
( Cat.Case ((d__2__), (d__4__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 44, file Parser.grm, line 113 *)
val _ = update_ yyact 44
(fn () => repr(let
val d__1__ = peekVal 1 : string*(int*int)
val d__2__ = peekVal 0 : Cat.Exp
in
( Cat.Apply (#1 (d__1__), (d__2__), #2 (d__1__)) ) end : Cat.Exp))
;
(* Rule 45, file Parser.grm, line 114 *)
val _ = update_ yyact 45
(fn () => repr(let
val d__1__ = peekVal 0 : (int*int)
in
( Cat.Read (d__1__) ) end : Cat.Exp))
;
(* Rule 46, file Parser.grm, line 115 *)
val _ = update_ yyact 46
(fn () => repr(let
val d__1__ = peekVal 1 : (int*int)
val d__2__ = peekVal 0 : Cat.Exp
in
( Cat.Write ((d__2__), (d__1__)) ) end : Cat.Exp))
;
(* Rule 47, file Parser.grm, line 116 *)
val _ = update_ yyact 47
(fn () => repr(let
val d__1__ = peekVal 2 : (int*int)
val d__2__ = peekVal 1 : Cat.Exp
val d__3__ = peekVal 0 : (int*int)
in
( (d__2__) ) end : Cat.Exp))
;
(* Rule 48, file Parser.grm, line 119 *)
val _ = update_ yyact 48
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp
in
( [(d__1__),(d__3__)] ) end : Cat.Exp list))
;
(* Rule 49, file Parser.grm, line 120 *)
val _ = update_ yyact 49
(fn () => repr(let
val d__1__ = peekVal 2 : Cat.Exp
val d__2__ = peekVal 1 : (int*int)
val d__3__ = peekVal 0 : Cat.Exp list
in
( (d__1__) :: (d__3__) ) end : Cat.Exp list))
;
(* Entry Prog *)
val _ = update_ yyact 50 (fn () => raise yyexit (peekVal 0));
val yytables : parseTables =
  ( yyact,
    yytransl,
    yylhs,
    yylen,
    yydefred,
    yydgoto,
    yysindex,
    yyrindex,
    yygindex,
    YYTABLESIZE,
    yytable,
    yycheck );
fun Prog lexer lexbuf = yyparse yytables 1 lexer lexbuf;
